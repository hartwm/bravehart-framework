@mixin colorClass($name, $color) {
  .#{$name} {
    color: $color;
  }

  .#{$name}-bg {
    background-color: $color;
  }

  .#{$name}-border {
    border-color: $color;
  }
}

// https://codepen.io/jonrohan/pen/NNGaBO
@function colorMap($baseColors, $variations) {
  $colors: ();

  @each $color, $value in $baseColors {
    $maxVar: 36;
    $mid: $variations / 2;
    $dist: $mid - 1;
    $step: $maxVar / $dist;

    // lighten and darken
    @for $i from 1 through $dist {
      $percent: $maxVar - ($step * ($i - 1));
      $darken: ($variations - $i) * 100;
      $lighten: $i * 100;

      $colors: map-merge(
        $colors,
        (#{$color}-#{$lighten}: lighten($value, $percent), #{$color}-#{$darken}: darken($value, $percent))
      );
    }

    // middle eg 500
    $colors: map-merge($colors, (#{$color}-50: lighten($value, 38.7)));
    $colors: map-merge($colors, (#{$color}-#{$variations/2 * 100}: $value));
    $colors: map-merge($colors, (#{$color}: $value));
  }
  @return $colors;
}

@each $key, $value in colorMap($color-list, 10) {
  @include colorClass(#{$key}, $value);
}
@each $key, $value in $alpha-list {
  @include colorClass(#{$key}, $value);
}

@each $key, $value in $alpha-list {
  @for $i from 1 through 9 {
    $alpha: $i * 0.1;
    $n: $i * 100;
    $text: "-a";
    @include colorClass(#{$key}#{$text}#{$n}, rgba($value, $alpha));
  }
}

// Get Color Function
@function getColor($color) {
  @return map-get(colorMap($color-list, 10), $color);
}
